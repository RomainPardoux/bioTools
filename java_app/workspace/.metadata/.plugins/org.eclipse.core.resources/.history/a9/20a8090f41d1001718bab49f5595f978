package com.sequence;

import java.awt.List;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import com.aminoAcid.Alanine;
import com.aminoAcid.Arginine;
import com.aminoAcid.Asparagine;
import com.aminoAcid.AsparticAcid;
import com.aminoAcid.Cysteine;
import com.aminoAcid.GlutamicAcid;
import com.aminoAcid.Glutamine;
import com.aminoAcid.Glycine;
import com.aminoAcid.Histidine;
import com.aminoAcid.Isoleucine;
import com.aminoAcid.Leucine;
import com.aminoAcid.Lysine;
import com.aminoAcid.Methionine;
import com.aminoAcid.PhenylAlanine;
import com.aminoAcid.Proline;
import com.aminoAcid.Selenocysteine;
import com.aminoAcid.Serine;
import com.aminoAcid.Threonine;
import com.aminoAcid.Tryptophan;
import com.aminoAcid.Tyrosine;
import com.aminoAcid.Valine;
import com.nucleotid.Adenine;
import com.nucleotid.Cytosine;
import com.nucleotid.Guanine;
import com.nucleotid.Thymine;
import com.nucleotid.Uracile;

public class SequenceNucleique implements Sequence{

	/* Declaration des variables d'instance */
	private String sequence = "", nomSeq = "", typeSeq = "dna";
	private int nbMonomer = 0;
	private Double mW = 0.0; 
	private BigDecimal mWRound;
	private ArrayList<Nucleotid> nucleotidList;
	private Nucleotid nucleotid;
	/* Variable Atom */
	private int  nbCatom, nbNatom, nbOatom, nbSatom, nbHatom, nbAtom;
	/* Map du code genetique */
	private HashMap<String, AminoAcid> mapCodeGene = new HashMap<>();
	private AminoAcid aminoAcid;
			
	/* Constructeurs */
	public SequenceNucleique() {	}

	public SequenceNucleique(String seq, String nom) {
		this.sequence = seq;
		this.nomSeq = nom;
		initConstructeur();
	}


	public SequenceNucleique(String seq) {
		this.sequence = seq;
		initConstructeur();
	}

	private void initConstructeur() {
		// TODO Auto-generated method stub
		for (int i = 0; i < mapCodeGene.size(); i++) {
			mapCodeGene.put("GCU", new Alanine);
		}
		

	}

	//Fonctions de classe
	//1. Fonctions generiques

	//1.1 Alimente la liste nucleotidList
	@Override
	public void addMonomer(String seq) {
		seq = seq.toLowerCase();
		nucleotidList = new ArrayList<Nucleotid>();
		for (int i = 0; i < seq.length(); i++) {
			char nucleotid = seq.charAt(i);
			switch (nucleotid) {
			case 'a':
				nucleotidList.add(new Adenine());	
				break;
			case 't':
				nucleotidList.add(new Thymine());	
				break;
			case 'c':
				nucleotidList.add(new Cytosine());
				break;
			case 'g':
				nucleotidList.add(new Guanine());
				break;
			case 'u':
				nucleotidList.add(new Uracile());
				break;
			} 
		}
	}

	@Override
	public int countMonomer(ArrayList<AminoAcid> nucleotidList) {
		nbMonomer = nucleotidList.size();
		return nbMonomer;
	}

	@Override
	/* A revoir */
	public void countAtom(ArrayList<AminoAcid> nucleotidList) {
		int cAtomBuffer = 0;
		int nAtomBuffer = 0;
		int oAtomBuffer = 0;
		int hAtomBuffer = 0;
		int totAtomBuffer = 0;
		for (int i = 0; i <nucleotidList.size(); i++) {
			cAtomBuffer += nucleotidList.get(i).getNbCarbonAtom();
			nAtomBuffer += nucleotidList.get(i).getNbAzoteAtom();
			hAtomBuffer += nucleotidList.get(i).getNbHydrogenAtom();
			oAtomBuffer += nucleotidList.get(i).getNbOxygenAtom();
		}
		oAtomBuffer -= (nucleotidList.size() - 1);
		hAtomBuffer -= (2 * (nucleotidList.size() - 1));
		totAtomBuffer = cAtomBuffer + nAtomBuffer + oAtomBuffer + hAtomBuffer;
		this.nbAtom = totAtomBuffer;
		this.nbCatom = cAtomBuffer;
		this.nbNatom = nAtomBuffer;
		this.nbOatom = oAtomBuffer;
		this.nbHatom = hAtomBuffer;
	}

	@Override
	/* A revoir */
	public Double computeMW(ArrayList<AminoAcid> nucleotidList) {
		Double MWTotal = 0.0;
		Double MW = 0.0;
		for (int i = 0; i < nucleotidList.size(); i++) {
			MW = nucleotidList.get(i).getMasseMolaire();
			MWTotal += MW;
		}
		return MWTotal;
	}

	public void translate (ArrayList<AminoAcid> nucleotidList){
		
	}
	
	@Override
	public String toString() {
		return "SequenceNucleique [sequence=" + sequence + ", nomSeq=" + nomSeq + ", typeSeq=" + typeSeq
				+ ", nbMonomer=" + nbMonomer + ", mW=" + mW + ", mWRound=" + mWRound + ", nucleotidList="
				+ nucleotidList + ", nucleotid=" + nucleotid + ", nbCatom=" + nbCatom + ", nbNatom=" + nbNatom
				+ ", nbOatom=" + nbOatom + ", nbSatom=" + nbSatom + ", nbHatom=" + nbHatom + ", nbAtom=" + nbAtom + "]";
	}
	
	

}
